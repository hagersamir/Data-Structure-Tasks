        -:    0:Source:C:/Users/hager/github-classroom/sbme-tutorials/task1-dynamic-memory-allocation-hagersamir/da.cpp
        -:    0:Graph:C:\Users\hager\github-classroom\sbme-tutorials\task1-dynamic-memory-allocation-hagersamir\cmake-build-debug-coverage\CMakeFiles\task1_dynamic_memory_allocation_hagersamir.dir\da.cpp.gcno
        -:    0:Data:C:\Users\hager\github-classroom\sbme-tutorials\task1-dynamic-memory-allocation-hagersamir\cmake-build-debug-coverage\CMakeFiles\task1_dynamic_memory_allocation_hagersamir.dir\da.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "da.h"
        -:    2:#include <iostream>
        -:    3:using namespace std;
function _ZN5My_DAC2Ev called 2 returned 100% blocks executed 80%
        2:    4:My_DA :: My_DA ()
        -:    5:{
        2:    6:    size = 0;
        2:    7:    capacity = 1;
       2*:    8:    data = new int[capacity];
        2:    8-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:    8-block  1
    %%%%%:    8-block  2
call    2 never executed
        2:    8-block  3
call    3 returned 2
        2:    9:}
function _ZN5My_DAC2EPii called 3 returned 100% blocks executed 91%
        3:   10:My_DA::My_DA(int *arr, int size)
        -:   11:{
        3:   12:    this ->size = size;
       13:   13:    while (size >= capacity){
        3:   13-block  0
       13:   13-block  1
branch  0 taken 10
branch  1 taken 3 (fallthrough)
       10:   14:        capacity*=2;
       10:   14-block  0
        -:   15:    }
       3*:   16:    data = new int[capacity];
        3:   16-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   16-block  1
    %%%%%:   16-block  2
call    2 never executed
        3:   16-block  3
call    3 returned 3
       23:   17:    for(int i = 0; i < size ; i++)
       23:   17-block  0
branch  0 taken 20
branch  1 taken 3 (fallthrough)
       20:   18:    data[i] = arr [i];
       20:   18-block  0
        3:   19:}
function _ZN5My_DA3getEi called 2 returned 100% blocks executed 100%
        2:   20:int My_DA :: get(int index)
        -:   21:{
        2:   22:    return data [index];
        2:   22-block  0
        -:   23:}
function _ZN5My_DA4pushEi called 2 returned 100% blocks executed 100%
        2:   24:void My_DA :: push(int element)
        -:   25:{
        2:   26:    if (size < capacity) {
        2:   26-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   27:        data[size++] = element;
        2:   27-block  0
        -:   28:    }
        2:   29:    if (size >= capacity) {
        2:   29-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   30:        expand();
        1:   30-block  0
call    0 returned 1
        -:   31:    }
        2:   32:}
function _ZN5My_DA3popEv called 7 returned 100% blocks executed 88%
        7:   33:int My_DA ::pop()
        -:   34:{
        7:   35:    int element = data[size-1];
        7:   36:    if (size < 1) {
        7:   36-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        1:   37:        return -1;
        1:   37-block  0
        -:   38:    }
        -:   39:
        6:   40:        if (size-1 <= capacity/4){
        6:   40-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        2:   41:        shrink();
        2:   41-block  0
call    0 returned 2
        -:   42:    }
        6:   43:    size--;
        6:   44:    if (size==0){
        6:   44-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:   45:        capacity = 1;
    %%%%%:   45-block  0
        -:   46:    }
        6:   47:    return element;
        6:   47-block  0
        -:   48:}
function _ZN5My_DA6insertEii called 1 returned 100% blocks executed 71%
        1:   49:    void My_DA::insert(int index, int element)
        -:   50:{
        1:   51:    if (index > size){
        1:   51-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   52:        expand();
    %%%%%:   52-block  0
call    0 never executed
    #####:   53:        data[index] = element;
        -:   54:    }
        2:   55:    for (int i = size; i > index ; i--)
        1:   55-block  0
        2:   55-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   56:        data[i] = data[i-1];
        1:   56-block  0
        1:   57:        data[index] = element;
        1:   58:        size++;
        1:   59:}
function _ZN5My_DA6removeEi called 3 returned 100% blocks executed 78%
        3:   60:int My_DA::remove(int index)
        -:   61:{
        3:   62:    int element = data[index];
        3:   63:    if (index <0 || index > size-1)
        3:   63-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        3:   63-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        -:   64:    {
        1:   65:       cout<<"invalid index"<<endl;
        1:   65-block  0
call    0 returned 1
call    1 returned 1
        1:   66:        return -1;
        -:   67:    }
        2:   68:    if (size < 1)
        2:   68-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:   69:    {
    #####:   70:        cout<< "the array is empty"<<endl;
    %%%%%:   70-block  0
call    0 never executed
call    1 never executed
    #####:   71:        return -1;
        -:   72:    }
        2:   73:    if (size<=capacity/4)
        2:   73-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:   74:    {
    #####:   75:        shrink();
    %%%%%:   75-block  0
call    0 never executed
        -:   76:    }
        3:   77:    for (int i = index; i < size-1 ; i++) {
        2:   77-block  0
        3:   77-block  1
branch  0 taken 1
branch  1 taken 2 (fallthrough)
        1:   78:        data[i] = data[i + 1];
        1:   78-block  0
        -:   79:    }
        2:   80:    size--;
        2:   81:    if (size==0){
        2:   81-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   82:        capacity = 1;
        1:   82-block  0
        -:   83:    }
        2:   84:    return element;
        2:   84-block  0
        -:   85:}
function _ZN5My_DA5printEv called 0 returned 0% blocks executed 0%
    #####:   86:void My_DA::print()
        -:   87:{
    #####:   88:    for (int i = 0; i < size; i++)
    %%%%%:   88-block  0
    %%%%%:   88-block  1
branch  0 never executed
branch  1 never executed
        -:   89:    {
    #####:   90:        cout<<data[i]<<endl;
    %%%%%:   90-block  0
call    0 never executed
call    1 never executed
        -:   91:    }
    #####:   92:}
function _ZN5My_DA6expandEv called 1 returned 100% blocks executed 90%
        1:   93:void My_DA::expand()
        -:   94:{
        1:   95:    capacity *= 2;
       1*:   96:    int *T = new int[capacity];
        1:   96-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   96-block  1
    %%%%%:   96-block  2
call    2 never executed
        1:   96-block  3
call    3 returned 1
        2:   97:    for (int i = 0; i < size; i++){
        2:   97-block  0
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   98:    T[i] = data[i];
        1:   98-block  0
        -:   99:    }
        1:  100:    delete [] data;
        1:  100-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  100-block  1
call    2 returned 1
        1:  101:    data = T;
        1:  102:}
function _ZN5My_DA5clearEv called 0 returned 0% blocks executed 0%
    #####:  103:void My_DA::clear()
        -:  104:{
    #####:  105:    size = 0;
    #####:  106:    capacity = size ;
    #####:  107:}
function _ZN5My_DA4findEi called 0 returned 0% blocks executed 0%
    #####:  108:int My_DA::find(int element)
        -:  109:{
    #####:  110:    for (int i = 0; i < size-1 ; i++) {
    %%%%%:  110-block  0
    %%%%%:  110-block  1
branch  0 never executed
branch  1 never executed
    #####:  111:        if (data[i] == element)
    %%%%%:  111-block  0
branch  0 never executed
branch  1 never executed
    #####:  112:            return i;
    %%%%%:  112-block  0
        -:  113:        else
    #####:  114:            return -1;
    %%%%%:  114-block  0
        -:  115:    }
    #####:  116:}
    %%%%%:  116-block  0
function _ZN5My_DA8get_sizeEv called 4 returned 100% blocks executed 100%
        4:  117:int My_DA::get_size()
        -:  118:{
        4:  119:    return size;
        4:  119-block  0
        -:  120:}
function _ZN5My_DA12get_capacityEv called 4 returned 100% blocks executed 100%
        4:  121:int My_DA::get_capacity()
        -:  122:{
        4:  123:    return capacity;
        4:  123-block  0
        -:  124:}
function _ZN5My_DA6shrinkEv called 2 returned 100% blocks executed 90%
        2:  125:void My_DA::shrink()
        -:  126:{
        2:  127:    capacity/=2;
       2*:  128:    int *temp = new int[capacity];
        2:  128-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  128-block  1
    %%%%%:  128-block  2
call    2 never executed
        2:  128-block  3
call    3 returned 2
        9:  129:    for (int i = 0; i < size ; i++) {
        9:  129-block  0
branch  0 taken 7
branch  1 taken 2 (fallthrough)
        7:  130:        temp[i] = data[i];
        7:  130-block  0
        -:  131:    }
        2:  132:    delete [] data;
        2:  132-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:  132-block  1
call    2 returned 2
        2:  133:    data = temp;
        2:  134:}
function _ZN5My_DAD2Ev called 0 returned 0% blocks executed 0%
    #####:  135:My_DA::~My_DA()
        -:  136:{
    #####:  137:    size = 0;
    #####:  138:    capacity = size;
    #####:  139:    delete [] data;
    %%%%%:  139-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  139-block  1
call    2 never executed
    #####:  140:}
        -:  141:
        -:  142:// implement all the methods in da.h
        -:  143:// feel free to add new helper methods whether private or public
